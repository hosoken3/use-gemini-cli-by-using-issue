name: Gemini API Agent
on:
  issue_comment:
    types: [created]

jobs:
  gemini-call:
    runs-on: ubuntu-latest
    # コメントに「@gemini-cli」が含まれている場合のみ実行
    if: contains(github.event.comment.body, '@gemini-cli')
    permissions:
      issues: write # Issueへのコメント書き込みに必要
    steps:
      # ステップ1: curlコマンドで直接GoogleのAIに質問を送り、結果をファイルに保存する
      - name: Call Gemini API directly
        run: |
          # Issueのコメント本文をJSON形式に整形する
          PROMPT_ESCAPED=$(echo "${{ github.event.comment.body }}" | jq -R -s '.')
          
          # curlコマンドでAPIを呼び出す
          curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H 'Content-Type: application/json' \
            -d "{ \"contents\":[{\"parts\":[{\"text\": ${PROMPT_ESCAPED}}]}]}" \
            -o gemini-response.json # 結果をファイルに出力
      
      # ステップ2: 以前成功した方法で、AIの返答をIssueにコメントとして投稿する
      - name: Create comment with Gemini response
        uses: actions/github-script@v7
        with:
          script: |
            // AIからの返答が書かれたファイルを読み込む
            const fs = require('fs');
            const response = JSON.parse(fs.readFileSync('gemini-response.json', 'utf8'));
            
            // JSONの中から、AIが生成したテキスト部分だけを取り出す
            // エラーの場合も考慮
            const geminiText = response.candidates?.[0]?.content?.parts?.[0]?.text || `エラーが発生しました：\n\`\`\`\n${JSON.stringify(response)}\n\`\`\``;

            // Issueにコメントを投稿する
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: geminiText
            });
